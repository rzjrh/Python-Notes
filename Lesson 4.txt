# Given a list of integer values. Write a python program to check whether it contains same number in adjacent position. 
# Display the count of such adjacent occurrences.
def adj_list_count(list_c):
    count = 0
    for i in range(0, len(list_c) - 1):
        if list_c[i] == list_c[i + 1]:
            count += 1
    print("the number of adj position is: ",count)


list1 = [1, 1, 5, 100, -20, -20, 6, 0, 0]
list2 = [10, 20, 30, 40, 30, 20]
adj_list_count(list1)
adj_list_count(list2)



# Write a python program to generate the ticket numbers for specified number of passengers traveling in a flight 
# as per the details mentioned below:
# The ticket number should be generated as airline:src:dest:number where
# - Consider AL1 as the value for airline
# - src and dest should be the first three characters of the source and destination cities.
# - number should be auto-generated starting from 101
x = int(input('Enter a number: '))
airline = 'AL1'
src = input('Enter source: ')
dest = input('Enter Destination: ')
number = 101
for i in (0,x):
   lst=[]
   for number in range (101,101+x):
       lst.append((airline, src[0:3], dest[0:3], number))
       number = number + 1
if (x>5):
   print(lst[-5:])
else:
   print(lst)

# second try 
def ticket_gen(src, dest):
    airline = 'AL1'
    number = 101
    lst = []
    for number in range(101, 106):
        lst.append((airline, src[0:3], dest[0:3], number))
        number = number + 1
    print(lst)


src1 = input('Enter source: ')
dest1 = input('Enter Destination: ')
ticket_gen(src1, dest1)


# Parimala code
def generate_ticket(airline,source,destination,no_of_passengers):
    ticket_number_list=[]
    number=101
    for i in range(0,no_of_passengers):
        ticket_number=airline+":"+source[:3]+":"+destination[:3]+":"+str(number)
        number+=1
        ticket_number_list+=[ticket_number]
    if(no_of_passengers>=5):
        return ticket_number_list[-5:]
    else:
        return ticket_number_list
print(generate_ticket("BA","Australia","France",2))



#Represent a small bilingual (English-Swedish) glossary given below as a Python dictionary
# {"merry":"god", "christmas":"jul", "and":"och", "happy":"gott", "new":"nytt", "year":"ar"} 
# and use it to translate your Christmas wishes from English into Swedish.
# That is, write a python function translate(b_dict,list_words) 
# that accepts the bilingual dictionary and a list of English words (your Christmas wish)
# and returns a list of equivalent Swedish words. 
def translate(dict, english_input):
    translation = []
    for index in english_input:
        for keys in dict.keys():
            if keys == index:
                translation.append(dict[keys])
    return translation


dict_key_value = {"merry": "god", "christmas": "jul", "and": "och", "happy": "gott", "new": "nytt", "year": "ar"}
input_to_be_translate = ['merry', 'christmas', 'happy', 'new', 'year']
print("ENGLISH", input_to_be_translate)

translate_swd = translate(dict_key_value, input_to_be_translate)
print("The  swedish translation is:", translate_swd)


# Shakeela code
def translate(b_dict,list_words):
    swedish_words=[]
    for i in list_words:
        for key in b_dict:
            if(key==i):
                swedish_words.append(b_dict[key])
    return swedish_words

 
b_dict={"merry":"god", "christmas":"jul", "and":"och", "happy":"gott", "new":"nytt", "year":"ar"}
list_words=["merry","christmas","and"]
swedish_words=translate(b_dict,list_words)
print("The swedish words are: ",swedish_words)

# Parimala Code
def translate(bilingual_dict,english_words_list):
    swedish_words_list=[]
    for i in english_words_list:
        equivalent_word=bilingual_dict[i]
        swedish_words_list.append(equivalent_word)
    return swedish_words_list
bilingual_dict= {"merry":"god", "christmas":"jul", "and":"och", "happy":"gott", "new":"nytt", "year":"ar"}
english_words_list=["merry","christmas"]
print("The bilingual dict is:",bilingual_dict)
print("The english words are:",english_words_list)
swedish_words_list=translate(bilingual_dict, english_words_list)
print("The equivalent swedish words are:",swedish_words_list)


# Write a Python function proper_divisors(num) which returns a list of all the proper divisors of given number.
# Example: Proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110
def find_divisors(num):
    div_list = []
    for i in range(1, num):
        if num % i == 0:
            div_list.append([i])
    print(div_list)


a = 220
find_divisors(a)


# Write a Python program to generate the next 15 leap years starting from a given year. 
# Populate the leap years into a list and display the list.
def find_next_15_ly(des_year):
    list_of_leap_years = []
    for i in range(des_year, des_year + 58):
        if des_year % 4 == 0 or des_year % 400 == 0 and des_year % 100 == 0:
            list_of_leap_years.append([i])
        des_year += 1
    print(list_of_leap_years)


year_to_calc1 = int(input("Enter your Year: "))
year_to_calc2 = int(input("Enter your Year: "))
find_next_15_ly(year_to_calc1)
find_next_15_ly(year_to_calc2)



